//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: log_files.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCallBase: ClientCallUnaryBase<Mavsdk_Rpc_LogFiles_GetEntriesRequest, Mavsdk_Rpc_LogFiles_GetEntriesResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall {
  override class var method: String { return "/mavsdk.rpc.log_files.LogFilesService/GetEntries" }
}

internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_LogFiles_DownloadLogFileResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_LogFiles_DownloadLogFileResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_LogFiles_DownloadLogFileResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
  override class var method: String { return "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile" }
}


/// Instantiate Mavsdk_Rpc_LogFiles_LogFilesServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_LogFiles_GetEntriesResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_LogFiles_GetEntriesResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeDownloadLogFile(_ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall

}

internal extension Mavsdk_Rpc_LogFiles_LogFilesServiceService {
  /// Synchronous. Unary.
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest) throws -> Mavsdk_Rpc_LogFiles_GetEntriesResponse {
    return try self.getEntries(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, completion: @escaping (Mavsdk_Rpc_LogFiles_GetEntriesResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall {
    return try self.getEntries(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeDownloadLogFile(_ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
    return try self.subscribeDownloadLogFile(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Mavsdk_Rpc_LogFiles_LogFilesServiceServiceClient: ServiceClientBase, Mavsdk_Rpc_LogFiles_LogFilesServiceService {
  /// Synchronous. Unary.
  internal func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_LogFiles_GetEntriesResponse {
    return try Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_LogFiles_GetEntriesResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall {
    return try Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeDownloadLogFile(_ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
    return try Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

class Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall {
  override class var method: String { return "/mavsdk.rpc.log_files.LogFilesService/GetEntries" }
}

class Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
  override class var method: String { return "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile" }
}

class Mavsdk_Rpc_LogFiles_LogFilesServiceServiceTestStub: ServiceClientTestStubBase, Mavsdk_Rpc_LogFiles_LogFilesServiceService {
  var getEntriesRequests: [Mavsdk_Rpc_LogFiles_GetEntriesRequest] = []
  var getEntriesResponses: [Mavsdk_Rpc_LogFiles_GetEntriesResponse] = []
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_LogFiles_GetEntriesResponse {
    getEntriesRequests.append(request)
    defer { getEntriesResponses.removeFirst() }
    return getEntriesResponses.first!
  }
  @discardableResult
  func getEntries(_ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_LogFiles_GetEntriesResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCall {
    let response = try self.getEntries(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesCallTestStub()
  }

  var subscribeDownloadLogFileRequests: [Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest] = []
  var subscribeDownloadLogFileCalls: [Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall] = []
  func subscribeDownloadLogFile(_ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileCall {
    subscribeDownloadLogFileRequests.append(request)
    defer { subscribeDownloadLogFileCalls.removeFirst() }
    return subscribeDownloadLogFileCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceProvider: ServiceProvider {
  func getEntries(request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, session: Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSession) throws -> Mavsdk_Rpc_LogFiles_GetEntriesResponse
  func subscribeDownloadLogFile(request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, session: Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSession) throws -> ServerStatus?
}

extension Mavsdk_Rpc_LogFiles_LogFilesServiceProvider {
  internal var serviceName: String { return "mavsdk.rpc.log_files.LogFilesService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/mavsdk.rpc.log_files.LogFilesService/GetEntries":
      return try Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSessionBase(
        handler: handler,
        providerBlock: { try self.getEntries(request: $0, session: $1 as! Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSessionBase) })
          .run()
    case "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile":
      return try Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeDownloadLogFile(request: $0, session: $1 as! Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_LogFiles_GetEntriesRequest, Mavsdk_Rpc_LogFiles_GetEntriesResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSession {}

class Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_LogFiles_LogFilesServiceGetEntriesSession {}

internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_LogFiles_DownloadLogFileResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_LogFiles_DownloadLogFileResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_LogFiles_DownloadLogFileResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSession {}

class Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>, Mavsdk_Rpc_LogFiles_LogFilesServiceSubscribeDownloadLogFileSession {}

