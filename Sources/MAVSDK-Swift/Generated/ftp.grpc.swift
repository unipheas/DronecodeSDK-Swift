//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ftp.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Mavsdk_Rpc_Ftp_FtpServiceResetCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceResetCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse>, Mavsdk_Rpc_Ftp_FtpServiceResetCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/Reset" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Ftp_DownloadResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Ftp_DownloadResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Ftp_DownloadResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SubscribeDownload" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Ftp_UploadResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Ftp_UploadResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Ftp_UploadResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SubscribeUpload" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/ListDirectory" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/CreateDirectory" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/RemoveDirectory" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse>, Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/RemoveFile" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRenameCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRenameCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse>, Mavsdk_Rpc_Ftp_FtpServiceRenameCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/Rename" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>, Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SetRootDirectory" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse>, Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SetTargetComponentId" }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, Mavsdk_Rpc_Ftp_GetOurComponentIdResponse>, Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/GetOurComponentId" }
}


/// Instantiate Mavsdk_Rpc_Ftp_FtpServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Ftp_FtpServiceService: ServiceClient {
  /// Synchronous. Unary.
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ResetResponse
  /// Asynchronous. Unary.
  @discardableResult
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ResetResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceResetCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeDownload(_ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeUpload(_ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall

  /// Synchronous. Unary.
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ListDirectoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ListDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall

  /// Synchronous. Unary.
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_CreateDirectoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_CreateDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall

  /// Synchronous. Unary.
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveDirectoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall

  /// Synchronous. Unary.
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveFileResponse
  /// Asynchronous. Unary.
  @discardableResult
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveFileResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall

  /// Synchronous. Unary.
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RenameResponse
  /// Asynchronous. Unary.
  @discardableResult
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RenameResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRenameCall

  /// Synchronous. Unary.
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse
  /// Asynchronous. Unary.
  @discardableResult
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall

  /// Synchronous. Unary.
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetRootDirectoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetRootDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall

  /// Synchronous. Unary.
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall

  /// Synchronous. Unary.
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_GetOurComponentIdResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_GetOurComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall

}

internal extension Mavsdk_Rpc_Ftp_FtpServiceService {
  /// Synchronous. Unary.
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest) throws -> Mavsdk_Rpc_Ftp_ResetResponse {
    return try self.reset(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, completion: @escaping (Mavsdk_Rpc_Ftp_ResetResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceResetCall {
    return try self.reset(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeDownload(_ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
    return try self.subscribeDownload(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeUpload(_ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
    return try self.subscribeUpload(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest) throws -> Mavsdk_Rpc_Ftp_ListDirectoryResponse {
    return try self.listDirectory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, completion: @escaping (Mavsdk_Rpc_Ftp_ListDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall {
    return try self.listDirectory(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest) throws -> Mavsdk_Rpc_Ftp_CreateDirectoryResponse {
    return try self.createDirectory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, completion: @escaping (Mavsdk_Rpc_Ftp_CreateDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall {
    return try self.createDirectory(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest) throws -> Mavsdk_Rpc_Ftp_RemoveDirectoryResponse {
    return try self.removeDirectory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall {
    return try self.removeDirectory(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest) throws -> Mavsdk_Rpc_Ftp_RemoveFileResponse {
    return try self.removeFile(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveFileResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall {
    return try self.removeFile(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest) throws -> Mavsdk_Rpc_Ftp_RenameResponse {
    return try self.rename(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, completion: @escaping (Mavsdk_Rpc_Ftp_RenameResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRenameCall {
    return try self.rename(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest) throws -> Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse {
    return try self.areFilesIdentical(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, completion: @escaping (Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall {
    return try self.areFilesIdentical(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest) throws -> Mavsdk_Rpc_Ftp_SetRootDirectoryResponse {
    return try self.setRootDirectory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, completion: @escaping (Mavsdk_Rpc_Ftp_SetRootDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall {
    return try self.setRootDirectory(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest) throws -> Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse {
    return try self.setTargetComponentId(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, completion: @escaping (Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall {
    return try self.setTargetComponentId(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest) throws -> Mavsdk_Rpc_Ftp_GetOurComponentIdResponse {
    return try self.getOurComponentId(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, completion: @escaping (Mavsdk_Rpc_Ftp_GetOurComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall {
    return try self.getOurComponentId(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Mavsdk_Rpc_Ftp_FtpServiceServiceClient: ServiceClientBase, Mavsdk_Rpc_Ftp_FtpServiceService {
  /// Synchronous. Unary.
  internal func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ResetResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceResetCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ResetResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceResetCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceResetCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeDownload(_ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeUpload(_ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ListDirectoryResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ListDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_CreateDirectoryResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_CreateDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveDirectoryResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveFileResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveFileResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RenameResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceRenameCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RenameResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRenameCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceRenameCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetRootDirectoryResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetRootDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_GetOurComponentIdResponse {
    return try Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_GetOurComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall {
    return try Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

class Mavsdk_Rpc_Ftp_FtpServiceResetCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceResetCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/Reset" }
}

class Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Ftp_DownloadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SubscribeDownload" }
}

class Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Ftp_UploadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SubscribeUpload" }
}

class Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/ListDirectory" }
}

class Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/CreateDirectory" }
}

class Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/RemoveDirectory" }
}

class Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/RemoveFile" }
}

class Mavsdk_Rpc_Ftp_FtpServiceRenameCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRenameCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/Rename" }
}

class Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical" }
}

class Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SetRootDirectory" }
}

class Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/SetTargetComponentId" }
}

class Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall {
  override class var method: String { return "/mavsdk.rpc.ftp.FtpService/GetOurComponentId" }
}

class Mavsdk_Rpc_Ftp_FtpServiceServiceTestStub: ServiceClientTestStubBase, Mavsdk_Rpc_Ftp_FtpServiceService {
  var resetRequests: [Mavsdk_Rpc_Ftp_ResetRequest] = []
  var resetResponses: [Mavsdk_Rpc_Ftp_ResetResponse] = []
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ResetResponse {
    resetRequests.append(request)
    defer { resetResponses.removeFirst() }
    return resetResponses.first!
  }
  @discardableResult
  func reset(_ request: Mavsdk_Rpc_Ftp_ResetRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ResetResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceResetCall {
    let response = try self.reset(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceResetCallTestStub()
  }

  var subscribeDownloadRequests: [Mavsdk_Rpc_Ftp_SubscribeDownloadRequest] = []
  var subscribeDownloadCalls: [Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall] = []
  func subscribeDownload(_ request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadCall {
    subscribeDownloadRequests.append(request)
    defer { subscribeDownloadCalls.removeFirst() }
    return subscribeDownloadCalls.first!
  }

  var subscribeUploadRequests: [Mavsdk_Rpc_Ftp_SubscribeUploadRequest] = []
  var subscribeUploadCalls: [Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall] = []
  func subscribeUpload(_ request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadCall {
    subscribeUploadRequests.append(request)
    defer { subscribeUploadCalls.removeFirst() }
    return subscribeUploadCalls.first!
  }

  var listDirectoryRequests: [Mavsdk_Rpc_Ftp_ListDirectoryRequest] = []
  var listDirectoryResponses: [Mavsdk_Rpc_Ftp_ListDirectoryResponse] = []
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_ListDirectoryResponse {
    listDirectoryRequests.append(request)
    defer { listDirectoryResponses.removeFirst() }
    return listDirectoryResponses.first!
  }
  @discardableResult
  func listDirectory(_ request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_ListDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCall {
    let response = try self.listDirectory(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceListDirectoryCallTestStub()
  }

  var createDirectoryRequests: [Mavsdk_Rpc_Ftp_CreateDirectoryRequest] = []
  var createDirectoryResponses: [Mavsdk_Rpc_Ftp_CreateDirectoryResponse] = []
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_CreateDirectoryResponse {
    createDirectoryRequests.append(request)
    defer { createDirectoryResponses.removeFirst() }
    return createDirectoryResponses.first!
  }
  @discardableResult
  func createDirectory(_ request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_CreateDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCall {
    let response = try self.createDirectory(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceCreateDirectoryCallTestStub()
  }

  var removeDirectoryRequests: [Mavsdk_Rpc_Ftp_RemoveDirectoryRequest] = []
  var removeDirectoryResponses: [Mavsdk_Rpc_Ftp_RemoveDirectoryResponse] = []
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveDirectoryResponse {
    removeDirectoryRequests.append(request)
    defer { removeDirectoryResponses.removeFirst() }
    return removeDirectoryResponses.first!
  }
  @discardableResult
  func removeDirectory(_ request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCall {
    let response = try self.removeDirectory(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectoryCallTestStub()
  }

  var removeFileRequests: [Mavsdk_Rpc_Ftp_RemoveFileRequest] = []
  var removeFileResponses: [Mavsdk_Rpc_Ftp_RemoveFileResponse] = []
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RemoveFileResponse {
    removeFileRequests.append(request)
    defer { removeFileResponses.removeFirst() }
    return removeFileResponses.first!
  }
  @discardableResult
  func removeFile(_ request: Mavsdk_Rpc_Ftp_RemoveFileRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RemoveFileResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCall {
    let response = try self.removeFile(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceRemoveFileCallTestStub()
  }

  var renameRequests: [Mavsdk_Rpc_Ftp_RenameRequest] = []
  var renameResponses: [Mavsdk_Rpc_Ftp_RenameResponse] = []
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_RenameResponse {
    renameRequests.append(request)
    defer { renameResponses.removeFirst() }
    return renameResponses.first!
  }
  @discardableResult
  func rename(_ request: Mavsdk_Rpc_Ftp_RenameRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_RenameResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceRenameCall {
    let response = try self.rename(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceRenameCallTestStub()
  }

  var areFilesIdenticalRequests: [Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest] = []
  var areFilesIdenticalResponses: [Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse] = []
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse {
    areFilesIdenticalRequests.append(request)
    defer { areFilesIdenticalResponses.removeFirst() }
    return areFilesIdenticalResponses.first!
  }
  @discardableResult
  func areFilesIdentical(_ request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCall {
    let response = try self.areFilesIdentical(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalCallTestStub()
  }

  var setRootDirectoryRequests: [Mavsdk_Rpc_Ftp_SetRootDirectoryRequest] = []
  var setRootDirectoryResponses: [Mavsdk_Rpc_Ftp_SetRootDirectoryResponse] = []
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetRootDirectoryResponse {
    setRootDirectoryRequests.append(request)
    defer { setRootDirectoryResponses.removeFirst() }
    return setRootDirectoryResponses.first!
  }
  @discardableResult
  func setRootDirectory(_ request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetRootDirectoryResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCall {
    let response = try self.setRootDirectory(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectoryCallTestStub()
  }

  var setTargetComponentIdRequests: [Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest] = []
  var setTargetComponentIdResponses: [Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse] = []
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse {
    setTargetComponentIdRequests.append(request)
    defer { setTargetComponentIdResponses.removeFirst() }
    return setTargetComponentIdResponses.first!
  }
  @discardableResult
  func setTargetComponentId(_ request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCall {
    let response = try self.setTargetComponentId(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdCallTestStub()
  }

  var getOurComponentIdRequests: [Mavsdk_Rpc_Ftp_GetOurComponentIdRequest] = []
  var getOurComponentIdResponses: [Mavsdk_Rpc_Ftp_GetOurComponentIdResponse] = []
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Ftp_GetOurComponentIdResponse {
    getOurComponentIdRequests.append(request)
    defer { getOurComponentIdResponses.removeFirst() }
    return getOurComponentIdResponses.first!
  }
  @discardableResult
  func getOurComponentId(_ request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Ftp_GetOurComponentIdResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCall {
    let response = try self.getOurComponentId(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdCallTestStub()
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Mavsdk_Rpc_Ftp_FtpServiceProvider: ServiceProvider {
  func reset(request: Mavsdk_Rpc_Ftp_ResetRequest, session: Mavsdk_Rpc_Ftp_FtpServiceResetSession) throws -> Mavsdk_Rpc_Ftp_ResetResponse
  func subscribeDownload(request: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, session: Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSession) throws -> ServerStatus?
  func subscribeUpload(request: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, session: Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSession) throws -> ServerStatus?
  func listDirectory(request: Mavsdk_Rpc_Ftp_ListDirectoryRequest, session: Mavsdk_Rpc_Ftp_FtpServiceListDirectorySession) throws -> Mavsdk_Rpc_Ftp_ListDirectoryResponse
  func createDirectory(request: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, session: Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySession) throws -> Mavsdk_Rpc_Ftp_CreateDirectoryResponse
  func removeDirectory(request: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, session: Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySession) throws -> Mavsdk_Rpc_Ftp_RemoveDirectoryResponse
  func removeFile(request: Mavsdk_Rpc_Ftp_RemoveFileRequest, session: Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSession) throws -> Mavsdk_Rpc_Ftp_RemoveFileResponse
  func rename(request: Mavsdk_Rpc_Ftp_RenameRequest, session: Mavsdk_Rpc_Ftp_FtpServiceRenameSession) throws -> Mavsdk_Rpc_Ftp_RenameResponse
  func areFilesIdentical(request: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, session: Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSession) throws -> Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse
  func setRootDirectory(request: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, session: Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySession) throws -> Mavsdk_Rpc_Ftp_SetRootDirectoryResponse
  func setTargetComponentId(request: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, session: Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSession) throws -> Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse
  func getOurComponentId(request: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, session: Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSession) throws -> Mavsdk_Rpc_Ftp_GetOurComponentIdResponse
}

extension Mavsdk_Rpc_Ftp_FtpServiceProvider {
  internal var serviceName: String { return "mavsdk.rpc.ftp.FtpService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/mavsdk.rpc.ftp.FtpService/Reset":
      return try Mavsdk_Rpc_Ftp_FtpServiceResetSessionBase(
        handler: handler,
        providerBlock: { try self.reset(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceResetSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/SubscribeDownload":
      return try Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeDownload(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/SubscribeUpload":
      return try Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeUpload(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/ListDirectory":
      return try Mavsdk_Rpc_Ftp_FtpServiceListDirectorySessionBase(
        handler: handler,
        providerBlock: { try self.listDirectory(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceListDirectorySessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/CreateDirectory":
      return try Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySessionBase(
        handler: handler,
        providerBlock: { try self.createDirectory(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/RemoveDirectory":
      return try Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySessionBase(
        handler: handler,
        providerBlock: { try self.removeDirectory(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/RemoveFile":
      return try Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSessionBase(
        handler: handler,
        providerBlock: { try self.removeFile(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/Rename":
      return try Mavsdk_Rpc_Ftp_FtpServiceRenameSessionBase(
        handler: handler,
        providerBlock: { try self.rename(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceRenameSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical":
      return try Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSessionBase(
        handler: handler,
        providerBlock: { try self.areFilesIdentical(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/SetRootDirectory":
      return try Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySessionBase(
        handler: handler,
        providerBlock: { try self.setRootDirectory(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/SetTargetComponentId":
      return try Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSessionBase(
        handler: handler,
        providerBlock: { try self.setTargetComponentId(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSessionBase) })
          .run()
    case "/mavsdk.rpc.ftp.FtpService/GetOurComponentId":
      return try Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSessionBase(
        handler: handler,
        providerBlock: { try self.getOurComponentId(request: $0, session: $1 as! Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceResetSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceResetSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_ResetRequest, Mavsdk_Rpc_Ftp_ResetResponse>, Mavsdk_Rpc_Ftp_FtpServiceResetSession {}

class Mavsdk_Rpc_Ftp_FtpServiceResetSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceResetSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Ftp_DownloadResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Ftp_DownloadResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Ftp_DownloadResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, Mavsdk_Rpc_Ftp_DownloadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSession {}

class Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Ftp_DownloadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeDownloadSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Ftp_UploadResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Ftp_UploadResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Ftp_UploadResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Ftp_SubscribeUploadRequest, Mavsdk_Rpc_Ftp_UploadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSession {}

class Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Ftp_UploadResponse>, Mavsdk_Rpc_Ftp_FtpServiceSubscribeUploadSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceListDirectorySession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceListDirectorySessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_ListDirectoryRequest, Mavsdk_Rpc_Ftp_ListDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceListDirectorySession {}

class Mavsdk_Rpc_Ftp_FtpServiceListDirectorySessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceListDirectorySession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_CreateDirectoryRequest, Mavsdk_Rpc_Ftp_CreateDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySession {}

class Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceCreateDirectorySession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, Mavsdk_Rpc_Ftp_RemoveDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySession {}

class Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRemoveDirectorySession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_RemoveFileRequest, Mavsdk_Rpc_Ftp_RemoveFileResponse>, Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSession {}

class Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRemoveFileSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceRenameSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceRenameSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_RenameRequest, Mavsdk_Rpc_Ftp_RenameResponse>, Mavsdk_Rpc_Ftp_FtpServiceRenameSession {}

class Mavsdk_Rpc_Ftp_FtpServiceRenameSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceRenameSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse>, Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSession {}

class Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceAreFilesIdenticalSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, Mavsdk_Rpc_Ftp_SetRootDirectoryResponse>, Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySession {}

class Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceSetRootDirectorySession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse>, Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSession {}

class Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceSetTargetComponentIdSession {}

internal protocol Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, Mavsdk_Rpc_Ftp_GetOurComponentIdResponse>, Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSession {}

class Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Ftp_FtpServiceGetOurComponentIdSession {}

