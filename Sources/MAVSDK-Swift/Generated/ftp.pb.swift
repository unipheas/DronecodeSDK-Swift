// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ftp.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mavsdk_Rpc_Ftp_ResetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_ResetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_SubscribeDownloadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path of the remote file to download.
  var remoteFilePath: String = String()

  /// The local directory to download to.
  var localDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_DownloadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  /// The progress data if result is next
  var progressData: Mavsdk_Rpc_Ftp_ProgressData {
    get {return _storage._progressData ?? Mavsdk_Rpc_Ftp_ProgressData()}
    set {_uniqueStorage()._progressData = newValue}
  }
  /// Returns true if `progressData` has been explicitly set.
  var hasProgressData: Bool {return _storage._progressData != nil}
  /// Clears the value of `progressData`. Subsequent reads from it will return its default value.
  mutating func clearProgressData() {_uniqueStorage()._progressData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_SubscribeUploadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The local file path to upload.
  var localFilePath: String = String()

  /// The remote directory to upload to.
  var remoteDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_UploadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  /// The progress data if result is next
  var progressData: Mavsdk_Rpc_Ftp_ProgressData {
    get {return _storage._progressData ?? Mavsdk_Rpc_Ftp_ProgressData()}
    set {_uniqueStorage()._progressData = newValue}
  }
  /// Returns true if `progressData` has been explicitly set.
  var hasProgressData: Bool {return _storage._progressData != nil}
  /// Clears the value of `progressData`. Subsequent reads from it will return its default value.
  mutating func clearProgressData() {_uniqueStorage()._progressData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_ListDirectoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The remote directory to list the contents for.
  var remoteDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_ListDirectoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  /// The found directory contents.
  var paths: [String] {
    get {return _storage._paths}
    set {_uniqueStorage()._paths = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_CreateDirectoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The remote directory to create.
  var remoteDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_CreateDirectoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_RemoveDirectoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The remote directory to remove.
  var remoteDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_RemoveDirectoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_RemoveFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path of the remote file to remove.
  var remoteFilePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_RemoveFileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_RenameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The remote source path.
  var remoteFromPath: String = String()

  /// The remote destination path.
  var remoteToPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_RenameResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path of the local file.
  var localFilePath: String = String()

  /// The path of the remote file.
  var remoteFilePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  /// Whether the files are identical.
  var areIdentical: Bool {
    get {return _storage._areIdentical}
    set {_uniqueStorage()._areIdentical = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_SetRootDirectoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The root directory to set.
  var rootDir: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_SetRootDirectoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The component ID to set.
  var componentID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ftpResult: Mavsdk_Rpc_Ftp_FtpResult {
    get {return _storage._ftpResult ?? Mavsdk_Rpc_Ftp_FtpResult()}
    set {_uniqueStorage()._ftpResult = newValue}
  }
  /// Returns true if `ftpResult` has been explicitly set.
  var hasFtpResult: Bool {return _storage._ftpResult != nil}
  /// Clears the value of `ftpResult`. Subsequent reads from it will return its default value.
  mutating func clearFtpResult() {_uniqueStorage()._ftpResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Ftp_GetOurComponentIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Ftp_GetOurComponentIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Our component ID.
  var componentID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Progress data type for file transfer.
struct Mavsdk_Rpc_Ftp_ProgressData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of bytes already transferred.
  var bytesTransferred: UInt32 = 0

  /// The total bytes to transfer.
  var totalBytes: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Result type.
struct Mavsdk_Rpc_Ftp_FtpResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_Ftp_FtpResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for FTP commands
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Success
    case success // = 1

    /// Intermediate message showing progress
    case next // = 2

    /// Timeout
    case timeout // = 3

    /// Operation is already in progress
    case busy // = 4

    /// File IO operation error
    case fileIoError // = 5

    /// File exists already
    case fileExists // = 6

    /// File does not exist
    case fileDoesNotExist // = 7

    /// File is write protected
    case fileProtected // = 8

    /// Invalid parameter
    case invalidParameter // = 9

    /// Unsupported command
    case unsupported // = 10

    /// General protocol error
    case protocolError // = 11
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .next
      case 3: self = .timeout
      case 4: self = .busy
      case 5: self = .fileIoError
      case 6: self = .fileExists
      case 7: self = .fileDoesNotExist
      case 8: self = .fileProtected
      case 9: self = .invalidParameter
      case 10: self = .unsupported
      case 11: self = .protocolError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .next: return 2
      case .timeout: return 3
      case .busy: return 4
      case .fileIoError: return 5
      case .fileExists: return 6
      case .fileDoesNotExist: return 7
      case .fileProtected: return 8
      case .invalidParameter: return 9
      case .unsupported: return 10
      case .protocolError: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Ftp_FtpResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Ftp_FtpResult.Result] = [
    .unknown,
    .success,
    .next,
    .timeout,
    .busy,
    .fileIoError,
    .fileExists,
    .fileDoesNotExist,
    .fileProtected,
    .invalidParameter,
    .unsupported,
    .protocolError,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.ftp"

extension Mavsdk_Rpc_Ftp_ResetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_ResetRequest, rhs: Mavsdk_Rpc_Ftp_ResetRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_ResetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_ResetResponse, rhs: Mavsdk_Rpc_Ftp_ResetResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SubscribeDownloadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeDownloadRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_file_path"),
    2: .standard(proto: "local_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteFilePath)
      case 2: try decoder.decodeSingularStringField(value: &self.localDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteFilePath, fieldNumber: 1)
    }
    if !self.localDir.isEmpty {
      try visitor.visitSingularStringField(value: self.localDir, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest, rhs: Mavsdk_Rpc_Ftp_SubscribeDownloadRequest) -> Bool {
    if lhs.remoteFilePath != rhs.remoteFilePath {return false}
    if lhs.localDir != rhs.localDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_DownloadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownloadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
    2: .standard(proto: "progress_data"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil
    var _progressData: Mavsdk_Rpc_Ftp_ProgressData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
      _progressData = source._progressData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._progressData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._progressData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_DownloadResponse, rhs: Mavsdk_Rpc_Ftp_DownloadResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        if _storage._progressData != rhs_storage._progressData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SubscribeUploadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeUploadRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_file_path"),
    2: .standard(proto: "remote_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.localFilePath)
      case 2: try decoder.decodeSingularStringField(value: &self.remoteDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.localFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.localFilePath, fieldNumber: 1)
    }
    if !self.remoteDir.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteDir, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SubscribeUploadRequest, rhs: Mavsdk_Rpc_Ftp_SubscribeUploadRequest) -> Bool {
    if lhs.localFilePath != rhs.localFilePath {return false}
    if lhs.remoteDir != rhs.remoteDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_UploadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
    2: .standard(proto: "progress_data"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil
    var _progressData: Mavsdk_Rpc_Ftp_ProgressData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
      _progressData = source._progressData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._progressData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._progressData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_UploadResponse, rhs: Mavsdk_Rpc_Ftp_UploadResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        if _storage._progressData != rhs_storage._progressData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_ListDirectoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListDirectoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteDir.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteDir, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_ListDirectoryRequest, rhs: Mavsdk_Rpc_Ftp_ListDirectoryRequest) -> Bool {
    if lhs.remoteDir != rhs.remoteDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_ListDirectoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListDirectoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
    2: .same(proto: "paths"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil
    var _paths: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
      _paths = source._paths
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._paths)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._paths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._paths, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_ListDirectoryResponse, rhs: Mavsdk_Rpc_Ftp_ListDirectoryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        if _storage._paths != rhs_storage._paths {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_CreateDirectoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateDirectoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteDir.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteDir, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_CreateDirectoryRequest, rhs: Mavsdk_Rpc_Ftp_CreateDirectoryRequest) -> Bool {
    if lhs.remoteDir != rhs.remoteDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_CreateDirectoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateDirectoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_CreateDirectoryResponse, rhs: Mavsdk_Rpc_Ftp_CreateDirectoryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RemoveDirectoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveDirectoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteDir.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteDir, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest, rhs: Mavsdk_Rpc_Ftp_RemoveDirectoryRequest) -> Bool {
    if lhs.remoteDir != rhs.remoteDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RemoveDirectoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveDirectoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RemoveDirectoryResponse, rhs: Mavsdk_Rpc_Ftp_RemoveDirectoryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RemoveFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_file_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteFilePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteFilePath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RemoveFileRequest, rhs: Mavsdk_Rpc_Ftp_RemoveFileRequest) -> Bool {
    if lhs.remoteFilePath != rhs.remoteFilePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RemoveFileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFileResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RemoveFileResponse, rhs: Mavsdk_Rpc_Ftp_RemoveFileResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RenameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RenameRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_from_path"),
    2: .standard(proto: "remote_to_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remoteFromPath)
      case 2: try decoder.decodeSingularStringField(value: &self.remoteToPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteFromPath.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteFromPath, fieldNumber: 1)
    }
    if !self.remoteToPath.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteToPath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RenameRequest, rhs: Mavsdk_Rpc_Ftp_RenameRequest) -> Bool {
    if lhs.remoteFromPath != rhs.remoteFromPath {return false}
    if lhs.remoteToPath != rhs.remoteToPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_RenameResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RenameResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_RenameResponse, rhs: Mavsdk_Rpc_Ftp_RenameResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AreFilesIdenticalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_file_path"),
    2: .standard(proto: "remote_file_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.localFilePath)
      case 2: try decoder.decodeSingularStringField(value: &self.remoteFilePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.localFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.localFilePath, fieldNumber: 1)
    }
    if !self.remoteFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteFilePath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest, rhs: Mavsdk_Rpc_Ftp_AreFilesIdenticalRequest) -> Bool {
    if lhs.localFilePath != rhs.localFilePath {return false}
    if lhs.remoteFilePath != rhs.remoteFilePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AreFilesIdenticalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
    2: .standard(proto: "are_identical"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil
    var _areIdentical: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
      _areIdentical = source._areIdentical
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._areIdentical)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._areIdentical != false {
        try visitor.visitSingularBoolField(value: _storage._areIdentical, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse, rhs: Mavsdk_Rpc_Ftp_AreFilesIdenticalResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        if _storage._areIdentical != rhs_storage._areIdentical {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SetRootDirectoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetRootDirectoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "root_dir"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rootDir)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rootDir.isEmpty {
      try visitor.visitSingularStringField(value: self.rootDir, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest, rhs: Mavsdk_Rpc_Ftp_SetRootDirectoryRequest) -> Bool {
    if lhs.rootDir != rhs.rootDir {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SetRootDirectoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetRootDirectoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SetRootDirectoryResponse, rhs: Mavsdk_Rpc_Ftp_SetRootDirectoryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTargetComponentIdRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "component_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.componentID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.componentID != 0 {
      try visitor.visitSingularUInt32Field(value: self.componentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest, rhs: Mavsdk_Rpc_Ftp_SetTargetComponentIdRequest) -> Bool {
    if lhs.componentID != rhs.componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetTargetComponentIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ftp_result"),
  ]

  fileprivate class _StorageClass {
    var _ftpResult: Mavsdk_Rpc_Ftp_FtpResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ftpResult = source._ftpResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ftpResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ftpResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse, rhs: Mavsdk_Rpc_Ftp_SetTargetComponentIdResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ftpResult != rhs_storage._ftpResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_GetOurComponentIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurComponentIdRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest, rhs: Mavsdk_Rpc_Ftp_GetOurComponentIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_GetOurComponentIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurComponentIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "component_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.componentID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.componentID != 0 {
      try visitor.visitSingularUInt32Field(value: self.componentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_GetOurComponentIdResponse, rhs: Mavsdk_Rpc_Ftp_GetOurComponentIdResponse) -> Bool {
    if lhs.componentID != rhs.componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_ProgressData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProgressData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bytes_transferred"),
    2: .standard(proto: "total_bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.bytesTransferred)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.totalBytes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytesTransferred != 0 {
      try visitor.visitSingularUInt32Field(value: self.bytesTransferred, fieldNumber: 1)
    }
    if self.totalBytes != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalBytes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_ProgressData, rhs: Mavsdk_Rpc_Ftp_ProgressData) -> Bool {
    if lhs.bytesTransferred != rhs.bytesTransferred {return false}
    if lhs.totalBytes != rhs.totalBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_FtpResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FtpResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.resultStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Ftp_FtpResult, rhs: Mavsdk_Rpc_Ftp_FtpResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Ftp_FtpResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_NEXT"),
    3: .same(proto: "RESULT_TIMEOUT"),
    4: .same(proto: "RESULT_BUSY"),
    5: .same(proto: "RESULT_FILE_IO_ERROR"),
    6: .same(proto: "RESULT_FILE_EXISTS"),
    7: .same(proto: "RESULT_FILE_DOES_NOT_EXIST"),
    8: .same(proto: "RESULT_FILE_PROTECTED"),
    9: .same(proto: "RESULT_INVALID_PARAMETER"),
    10: .same(proto: "RESULT_UNSUPPORTED"),
    11: .same(proto: "RESULT_PROTOCOL_ERROR"),
  ]
}
