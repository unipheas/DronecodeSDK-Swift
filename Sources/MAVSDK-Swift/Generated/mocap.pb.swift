// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mocap.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mavsdk_Rpc_Mocap_SetVisionPositionEstimateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The vision position estimate
  var visionPositionEstimate: Mavsdk_Rpc_Mocap_VisionPositionEstimate {
    get {return _storage._visionPositionEstimate ?? Mavsdk_Rpc_Mocap_VisionPositionEstimate()}
    set {_uniqueStorage()._visionPositionEstimate = newValue}
  }
  /// Returns true if `visionPositionEstimate` has been explicitly set.
  var hasVisionPositionEstimate: Bool {return _storage._visionPositionEstimate != nil}
  /// Clears the value of `visionPositionEstimate`. Subsequent reads from it will return its default value.
  mutating func clearVisionPositionEstimate() {_uniqueStorage()._visionPositionEstimate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Mocap_SetVisionPositionEstimateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mocapResult: Mavsdk_Rpc_Mocap_MocapResult {
    get {return _storage._mocapResult ?? Mavsdk_Rpc_Mocap_MocapResult()}
    set {_uniqueStorage()._mocapResult = newValue}
  }
  /// Returns true if `mocapResult` has been explicitly set.
  var hasMocapResult: Bool {return _storage._mocapResult != nil}
  /// Clears the value of `mocapResult`. Subsequent reads from it will return its default value.
  mutating func clearMocapResult() {_uniqueStorage()._mocapResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Mocap_SetAttitudePositionMocapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The attitude and position data
  var attitudePositionMocap: Mavsdk_Rpc_Mocap_AttitudePositionMocap {
    get {return _storage._attitudePositionMocap ?? Mavsdk_Rpc_Mocap_AttitudePositionMocap()}
    set {_uniqueStorage()._attitudePositionMocap = newValue}
  }
  /// Returns true if `attitudePositionMocap` has been explicitly set.
  var hasAttitudePositionMocap: Bool {return _storage._attitudePositionMocap != nil}
  /// Clears the value of `attitudePositionMocap`. Subsequent reads from it will return its default value.
  mutating func clearAttitudePositionMocap() {_uniqueStorage()._attitudePositionMocap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Mocap_SetAttitudePositionMocapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mocapResult: Mavsdk_Rpc_Mocap_MocapResult {
    get {return _storage._mocapResult ?? Mavsdk_Rpc_Mocap_MocapResult()}
    set {_uniqueStorage()._mocapResult = newValue}
  }
  /// Returns true if `mocapResult` has been explicitly set.
  var hasMocapResult: Bool {return _storage._mocapResult != nil}
  /// Clears the value of `mocapResult`. Subsequent reads from it will return its default value.
  mutating func clearMocapResult() {_uniqueStorage()._mocapResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Mocap_SetOdometryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The odometry data
  var odometry: Mavsdk_Rpc_Mocap_Odometry {
    get {return _storage._odometry ?? Mavsdk_Rpc_Mocap_Odometry()}
    set {_uniqueStorage()._odometry = newValue}
  }
  /// Returns true if `odometry` has been explicitly set.
  var hasOdometry: Bool {return _storage._odometry != nil}
  /// Clears the value of `odometry`. Subsequent reads from it will return its default value.
  mutating func clearOdometry() {_uniqueStorage()._odometry = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Mocap_SetOdometryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mocapResult: Mavsdk_Rpc_Mocap_MocapResult {
    get {return _storage._mocapResult ?? Mavsdk_Rpc_Mocap_MocapResult()}
    set {_uniqueStorage()._mocapResult = newValue}
  }
  /// Returns true if `mocapResult` has been explicitly set.
  var hasMocapResult: Bool {return _storage._mocapResult != nil}
  /// Clears the value of `mocapResult`. Subsequent reads from it will return its default value.
  mutating func clearMocapResult() {_uniqueStorage()._mocapResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Body position type
struct Mavsdk_Rpc_Mocap_PositionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// X position in metres.
  var xM: Float = 0

  /// Y position in metres.
  var yM: Float = 0

  /// Z position in metres.
  var zM: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Body angle type
struct Mavsdk_Rpc_Mocap_AngleBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Roll angle in radians.
  var rollRad: Float = 0

  /// Pitch angle in radians.
  var pitchRad: Float = 0

  /// Yaw angle in radians.
  var yawRad: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Speed type, represented in the Body (X Y Z) frame and in metres/second.
struct Mavsdk_Rpc_Mocap_SpeedBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Velocity in X in metres/second.
  var xMS: Float = 0

  /// Velocity in Y in metres/second.
  var yMS: Float = 0

  /// Velocity in Z in metres/second.
  var zMS: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Angular velocity type
struct Mavsdk_Rpc_Mocap_AngularVelocityBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Roll angular velocity in radians/second.
  var rollRadS: Float = 0

  /// Pitch angular velocity in radians/second.
  var pitchRadS: Float = 0

  /// Yaw angular velocity in radians/second.
  var yawRadS: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Covariance type.
/// Row-major representation of a 6x6 cross-covariance matrix upper
/// right triangle.
/// Needs to be 21 entries or 1 entry with NaN if unknown.
struct Mavsdk_Rpc_Mocap_Covariance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The covariance matrix
  var covarianceMatrix: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///
/// Quaternion type.
///
/// All rotations and axis systems follow the right-hand rule.
/// The Hamilton quaternion product definition is used.
/// A zero-rotation quaternion is represented by (1,0,0,0).
/// The quaternion could also be written as w + xi + yj + zk.
///
/// For more info see: https://en.wikipedia.org/wiki/Quaternion
struct Mavsdk_Rpc_Mocap_Quaternion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Quaternion entry 0, also denoted as a
  var w: Float = 0

  /// Quaternion entry 1, also denoted as b
  var x: Float = 0

  /// Quaternion entry 2, also denoted as c
  var y: Float = 0

  /// Quaternion entry 3, also denoted as d
  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Global position/attitude estimate from a vision source.
struct Mavsdk_Rpc_Mocap_VisionPositionEstimate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
  var timeUsec: UInt64 {
    get {return _storage._timeUsec}
    set {_uniqueStorage()._timeUsec = newValue}
  }

  /// Global position (m)
  var positionBody: Mavsdk_Rpc_Mocap_PositionBody {
    get {return _storage._positionBody ?? Mavsdk_Rpc_Mocap_PositionBody()}
    set {_uniqueStorage()._positionBody = newValue}
  }
  /// Returns true if `positionBody` has been explicitly set.
  var hasPositionBody: Bool {return _storage._positionBody != nil}
  /// Clears the value of `positionBody`. Subsequent reads from it will return its default value.
  mutating func clearPositionBody() {_uniqueStorage()._positionBody = nil}

  /// Body angle (rad).
  var angleBody: Mavsdk_Rpc_Mocap_AngleBody {
    get {return _storage._angleBody ?? Mavsdk_Rpc_Mocap_AngleBody()}
    set {_uniqueStorage()._angleBody = newValue}
  }
  /// Returns true if `angleBody` has been explicitly set.
  var hasAngleBody: Bool {return _storage._angleBody != nil}
  /// Clears the value of `angleBody`. Subsequent reads from it will return its default value.
  mutating func clearAngleBody() {_uniqueStorage()._angleBody = nil}

  /// Pose cross-covariance matrix.
  var poseCovariance: Mavsdk_Rpc_Mocap_Covariance {
    get {return _storage._poseCovariance ?? Mavsdk_Rpc_Mocap_Covariance()}
    set {_uniqueStorage()._poseCovariance = newValue}
  }
  /// Returns true if `poseCovariance` has been explicitly set.
  var hasPoseCovariance: Bool {return _storage._poseCovariance != nil}
  /// Clears the value of `poseCovariance`. Subsequent reads from it will return its default value.
  mutating func clearPoseCovariance() {_uniqueStorage()._poseCovariance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Motion capture attitude and position
struct Mavsdk_Rpc_Mocap_AttitudePositionMocap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
  var timeUsec: UInt64 {
    get {return _storage._timeUsec}
    set {_uniqueStorage()._timeUsec = newValue}
  }

  /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
  var q: Mavsdk_Rpc_Mocap_Quaternion {
    get {return _storage._q ?? Mavsdk_Rpc_Mocap_Quaternion()}
    set {_uniqueStorage()._q = newValue}
  }
  /// Returns true if `q` has been explicitly set.
  var hasQ: Bool {return _storage._q != nil}
  /// Clears the value of `q`. Subsequent reads from it will return its default value.
  mutating func clearQ() {_uniqueStorage()._q = nil}

  /// Body Position (NED)
  var positionBody: Mavsdk_Rpc_Mocap_PositionBody {
    get {return _storage._positionBody ?? Mavsdk_Rpc_Mocap_PositionBody()}
    set {_uniqueStorage()._positionBody = newValue}
  }
  /// Returns true if `positionBody` has been explicitly set.
  var hasPositionBody: Bool {return _storage._positionBody != nil}
  /// Clears the value of `positionBody`. Subsequent reads from it will return its default value.
  mutating func clearPositionBody() {_uniqueStorage()._positionBody = nil}

  /// Pose cross-covariance matrix.
  var poseCovariance: Mavsdk_Rpc_Mocap_Covariance {
    get {return _storage._poseCovariance ?? Mavsdk_Rpc_Mocap_Covariance()}
    set {_uniqueStorage()._poseCovariance = newValue}
  }
  /// Returns true if `poseCovariance` has been explicitly set.
  var hasPoseCovariance: Bool {return _storage._poseCovariance != nil}
  /// Clears the value of `poseCovariance`. Subsequent reads from it will return its default value.
  mutating func clearPoseCovariance() {_uniqueStorage()._poseCovariance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Odometry message to communicate odometry information with an external interface.
struct Mavsdk_Rpc_Mocap_Odometry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp (0 to use Backend timestamp).
  var timeUsec: UInt64 {
    get {return _storage._timeUsec}
    set {_uniqueStorage()._timeUsec = newValue}
  }

  /// Coordinate frame of reference for the pose data.
  var frameID: Mavsdk_Rpc_Mocap_Odometry.MavFrame {
    get {return _storage._frameID}
    set {_uniqueStorage()._frameID = newValue}
  }

  /// Body Position.
  var positionBody: Mavsdk_Rpc_Mocap_PositionBody {
    get {return _storage._positionBody ?? Mavsdk_Rpc_Mocap_PositionBody()}
    set {_uniqueStorage()._positionBody = newValue}
  }
  /// Returns true if `positionBody` has been explicitly set.
  var hasPositionBody: Bool {return _storage._positionBody != nil}
  /// Clears the value of `positionBody`. Subsequent reads from it will return its default value.
  mutating func clearPositionBody() {_uniqueStorage()._positionBody = nil}

  /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
  var q: Mavsdk_Rpc_Mocap_Quaternion {
    get {return _storage._q ?? Mavsdk_Rpc_Mocap_Quaternion()}
    set {_uniqueStorage()._q = newValue}
  }
  /// Returns true if `q` has been explicitly set.
  var hasQ: Bool {return _storage._q != nil}
  /// Clears the value of `q`. Subsequent reads from it will return its default value.
  mutating func clearQ() {_uniqueStorage()._q = nil}

  /// Linear speed (m/s).
  var speedBody: Mavsdk_Rpc_Mocap_SpeedBody {
    get {return _storage._speedBody ?? Mavsdk_Rpc_Mocap_SpeedBody()}
    set {_uniqueStorage()._speedBody = newValue}
  }
  /// Returns true if `speedBody` has been explicitly set.
  var hasSpeedBody: Bool {return _storage._speedBody != nil}
  /// Clears the value of `speedBody`. Subsequent reads from it will return its default value.
  mutating func clearSpeedBody() {_uniqueStorage()._speedBody = nil}

  /// Angular speed (rad/s).
  var angularVelocityBody: Mavsdk_Rpc_Mocap_AngularVelocityBody {
    get {return _storage._angularVelocityBody ?? Mavsdk_Rpc_Mocap_AngularVelocityBody()}
    set {_uniqueStorage()._angularVelocityBody = newValue}
  }
  /// Returns true if `angularVelocityBody` has been explicitly set.
  var hasAngularVelocityBody: Bool {return _storage._angularVelocityBody != nil}
  /// Clears the value of `angularVelocityBody`. Subsequent reads from it will return its default value.
  mutating func clearAngularVelocityBody() {_uniqueStorage()._angularVelocityBody = nil}

  /// Pose cross-covariance matrix.
  var poseCovariance: Mavsdk_Rpc_Mocap_Covariance {
    get {return _storage._poseCovariance ?? Mavsdk_Rpc_Mocap_Covariance()}
    set {_uniqueStorage()._poseCovariance = newValue}
  }
  /// Returns true if `poseCovariance` has been explicitly set.
  var hasPoseCovariance: Bool {return _storage._poseCovariance != nil}
  /// Clears the value of `poseCovariance`. Subsequent reads from it will return its default value.
  mutating func clearPoseCovariance() {_uniqueStorage()._poseCovariance = nil}

  /// Velocity cross-covariance matrix.
  var velocityCovariance: Mavsdk_Rpc_Mocap_Covariance {
    get {return _storage._velocityCovariance ?? Mavsdk_Rpc_Mocap_Covariance()}
    set {_uniqueStorage()._velocityCovariance = newValue}
  }
  /// Returns true if `velocityCovariance` has been explicitly set.
  var hasVelocityCovariance: Bool {return _storage._velocityCovariance != nil}
  /// Clears the value of `velocityCovariance`. Subsequent reads from it will return its default value.
  mutating func clearVelocityCovariance() {_uniqueStorage()._velocityCovariance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Mavlink frame id
  enum MavFrame: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// MAVLink number: 14. Odometry local coordinate frame of data given by a motion capture system, Z-down (x: north, y: east, z: down).
    case mocapNed // = 0

    /// MAVLink number: 20. Forward, Right, Down coordinate frame. This is a local frame with Z-down and arbitrary F/R alignment (i.e. not aligned with NED/earth frame). Replacement for MAV_FRAME_MOCAP_NED, MAV_FRAME_VISION_NED, MAV_FRAME_ESTIM_NED.
    case localFrd // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .mocapNed
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mocapNed
      case 1: self = .localFrd
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .mocapNed: return 0
      case .localFrd: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Mocap_Odometry.MavFrame: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Mocap_Odometry.MavFrame] = [
    .mocapNed,
    .localFrd,
  ]
}

#endif  // swift(>=4.2)

/// Result type.
struct Mavsdk_Rpc_Mocap_MocapResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_Mocap_MocapResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for mocap requests
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown error
    case unknown // = 0

    /// Request succeeded
    case success // = 1

    /// No system is connected
    case noSystem // = 2

    /// Connection error
    case connectionError // = 3

    /// Invalid request data
    case invalidRequestData // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .noSystem
      case 3: self = .connectionError
      case 4: self = .invalidRequestData
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .noSystem: return 2
      case .connectionError: return 3
      case .invalidRequestData: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Mocap_MocapResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Mocap_MocapResult.Result] = [
    .unknown,
    .success,
    .noSystem,
    .connectionError,
    .invalidRequestData,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.mocap"

extension Mavsdk_Rpc_Mocap_SetVisionPositionEstimateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVisionPositionEstimateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vision_position_estimate"),
  ]

  fileprivate class _StorageClass {
    var _visionPositionEstimate: Mavsdk_Rpc_Mocap_VisionPositionEstimate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visionPositionEstimate = source._visionPositionEstimate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visionPositionEstimate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visionPositionEstimate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetVisionPositionEstimateRequest, rhs: Mavsdk_Rpc_Mocap_SetVisionPositionEstimateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visionPositionEstimate != rhs_storage._visionPositionEstimate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SetVisionPositionEstimateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVisionPositionEstimateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mocap_result"),
  ]

  fileprivate class _StorageClass {
    var _mocapResult: Mavsdk_Rpc_Mocap_MocapResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mocapResult = source._mocapResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mocapResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mocapResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetVisionPositionEstimateResponse, rhs: Mavsdk_Rpc_Mocap_SetVisionPositionEstimateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mocapResult != rhs_storage._mocapResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SetAttitudePositionMocapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetAttitudePositionMocapRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attitude_position_mocap"),
  ]

  fileprivate class _StorageClass {
    var _attitudePositionMocap: Mavsdk_Rpc_Mocap_AttitudePositionMocap? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attitudePositionMocap = source._attitudePositionMocap
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._attitudePositionMocap)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attitudePositionMocap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetAttitudePositionMocapRequest, rhs: Mavsdk_Rpc_Mocap_SetAttitudePositionMocapRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._attitudePositionMocap != rhs_storage._attitudePositionMocap {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SetAttitudePositionMocapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetAttitudePositionMocapResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mocap_result"),
  ]

  fileprivate class _StorageClass {
    var _mocapResult: Mavsdk_Rpc_Mocap_MocapResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mocapResult = source._mocapResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mocapResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mocapResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetAttitudePositionMocapResponse, rhs: Mavsdk_Rpc_Mocap_SetAttitudePositionMocapResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mocapResult != rhs_storage._mocapResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SetOdometryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetOdometryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "odometry"),
  ]

  fileprivate class _StorageClass {
    var _odometry: Mavsdk_Rpc_Mocap_Odometry? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _odometry = source._odometry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._odometry)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._odometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetOdometryRequest, rhs: Mavsdk_Rpc_Mocap_SetOdometryRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._odometry != rhs_storage._odometry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SetOdometryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetOdometryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mocap_result"),
  ]

  fileprivate class _StorageClass {
    var _mocapResult: Mavsdk_Rpc_Mocap_MocapResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mocapResult = source._mocapResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mocapResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mocapResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SetOdometryResponse, rhs: Mavsdk_Rpc_Mocap_SetOdometryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mocapResult != rhs_storage._mocapResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_PositionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PositionBody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "x_m"),
    2: .standard(proto: "y_m"),
    3: .standard(proto: "z_m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.xM)
      case 2: try decoder.decodeSingularFloatField(value: &self.yM)
      case 3: try decoder.decodeSingularFloatField(value: &self.zM)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.xM != 0 {
      try visitor.visitSingularFloatField(value: self.xM, fieldNumber: 1)
    }
    if self.yM != 0 {
      try visitor.visitSingularFloatField(value: self.yM, fieldNumber: 2)
    }
    if self.zM != 0 {
      try visitor.visitSingularFloatField(value: self.zM, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_PositionBody, rhs: Mavsdk_Rpc_Mocap_PositionBody) -> Bool {
    if lhs.xM != rhs.xM {return false}
    if lhs.yM != rhs.yM {return false}
    if lhs.zM != rhs.zM {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_AngleBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AngleBody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roll_rad"),
    2: .standard(proto: "pitch_rad"),
    3: .standard(proto: "yaw_rad"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.rollRad)
      case 2: try decoder.decodeSingularFloatField(value: &self.pitchRad)
      case 3: try decoder.decodeSingularFloatField(value: &self.yawRad)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rollRad != 0 {
      try visitor.visitSingularFloatField(value: self.rollRad, fieldNumber: 1)
    }
    if self.pitchRad != 0 {
      try visitor.visitSingularFloatField(value: self.pitchRad, fieldNumber: 2)
    }
    if self.yawRad != 0 {
      try visitor.visitSingularFloatField(value: self.yawRad, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_AngleBody, rhs: Mavsdk_Rpc_Mocap_AngleBody) -> Bool {
    if lhs.rollRad != rhs.rollRad {return false}
    if lhs.pitchRad != rhs.pitchRad {return false}
    if lhs.yawRad != rhs.yawRad {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_SpeedBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpeedBody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "x_m_s"),
    2: .standard(proto: "y_m_s"),
    3: .standard(proto: "z_m_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.xMS)
      case 2: try decoder.decodeSingularFloatField(value: &self.yMS)
      case 3: try decoder.decodeSingularFloatField(value: &self.zMS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.xMS != 0 {
      try visitor.visitSingularFloatField(value: self.xMS, fieldNumber: 1)
    }
    if self.yMS != 0 {
      try visitor.visitSingularFloatField(value: self.yMS, fieldNumber: 2)
    }
    if self.zMS != 0 {
      try visitor.visitSingularFloatField(value: self.zMS, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_SpeedBody, rhs: Mavsdk_Rpc_Mocap_SpeedBody) -> Bool {
    if lhs.xMS != rhs.xMS {return false}
    if lhs.yMS != rhs.yMS {return false}
    if lhs.zMS != rhs.zMS {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_AngularVelocityBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AngularVelocityBody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roll_rad_s"),
    2: .standard(proto: "pitch_rad_s"),
    3: .standard(proto: "yaw_rad_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.rollRadS)
      case 2: try decoder.decodeSingularFloatField(value: &self.pitchRadS)
      case 3: try decoder.decodeSingularFloatField(value: &self.yawRadS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rollRadS != 0 {
      try visitor.visitSingularFloatField(value: self.rollRadS, fieldNumber: 1)
    }
    if self.pitchRadS != 0 {
      try visitor.visitSingularFloatField(value: self.pitchRadS, fieldNumber: 2)
    }
    if self.yawRadS != 0 {
      try visitor.visitSingularFloatField(value: self.yawRadS, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_AngularVelocityBody, rhs: Mavsdk_Rpc_Mocap_AngularVelocityBody) -> Bool {
    if lhs.rollRadS != rhs.rollRadS {return false}
    if lhs.pitchRadS != rhs.pitchRadS {return false}
    if lhs.yawRadS != rhs.yawRadS {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_Covariance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Covariance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "covariance_matrix"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedFloatField(value: &self.covarianceMatrix)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.covarianceMatrix.isEmpty {
      try visitor.visitPackedFloatField(value: self.covarianceMatrix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_Covariance, rhs: Mavsdk_Rpc_Mocap_Covariance) -> Bool {
    if lhs.covarianceMatrix != rhs.covarianceMatrix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_Quaternion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quaternion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.w)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.w != 0 {
      try visitor.visitSingularFloatField(value: self.w, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_Quaternion, rhs: Mavsdk_Rpc_Mocap_Quaternion) -> Bool {
    if lhs.w != rhs.w {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_VisionPositionEstimate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisionPositionEstimate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_usec"),
    2: .standard(proto: "position_body"),
    3: .standard(proto: "angle_body"),
    4: .standard(proto: "pose_covariance"),
  ]

  fileprivate class _StorageClass {
    var _timeUsec: UInt64 = 0
    var _positionBody: Mavsdk_Rpc_Mocap_PositionBody? = nil
    var _angleBody: Mavsdk_Rpc_Mocap_AngleBody? = nil
    var _poseCovariance: Mavsdk_Rpc_Mocap_Covariance? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timeUsec = source._timeUsec
      _positionBody = source._positionBody
      _angleBody = source._angleBody
      _poseCovariance = source._poseCovariance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._timeUsec)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._positionBody)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._angleBody)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._poseCovariance)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timeUsec != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeUsec, fieldNumber: 1)
      }
      if let v = _storage._positionBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._angleBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._poseCovariance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_VisionPositionEstimate, rhs: Mavsdk_Rpc_Mocap_VisionPositionEstimate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeUsec != rhs_storage._timeUsec {return false}
        if _storage._positionBody != rhs_storage._positionBody {return false}
        if _storage._angleBody != rhs_storage._angleBody {return false}
        if _storage._poseCovariance != rhs_storage._poseCovariance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_AttitudePositionMocap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttitudePositionMocap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_usec"),
    2: .same(proto: "q"),
    3: .standard(proto: "position_body"),
    4: .standard(proto: "pose_covariance"),
  ]

  fileprivate class _StorageClass {
    var _timeUsec: UInt64 = 0
    var _q: Mavsdk_Rpc_Mocap_Quaternion? = nil
    var _positionBody: Mavsdk_Rpc_Mocap_PositionBody? = nil
    var _poseCovariance: Mavsdk_Rpc_Mocap_Covariance? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timeUsec = source._timeUsec
      _q = source._q
      _positionBody = source._positionBody
      _poseCovariance = source._poseCovariance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._timeUsec)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._q)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._positionBody)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._poseCovariance)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timeUsec != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeUsec, fieldNumber: 1)
      }
      if let v = _storage._q {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._positionBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._poseCovariance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_AttitudePositionMocap, rhs: Mavsdk_Rpc_Mocap_AttitudePositionMocap) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeUsec != rhs_storage._timeUsec {return false}
        if _storage._q != rhs_storage._q {return false}
        if _storage._positionBody != rhs_storage._positionBody {return false}
        if _storage._poseCovariance != rhs_storage._poseCovariance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_Odometry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Odometry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_usec"),
    2: .standard(proto: "frame_id"),
    3: .standard(proto: "position_body"),
    4: .same(proto: "q"),
    5: .standard(proto: "speed_body"),
    6: .standard(proto: "angular_velocity_body"),
    7: .standard(proto: "pose_covariance"),
    8: .standard(proto: "velocity_covariance"),
  ]

  fileprivate class _StorageClass {
    var _timeUsec: UInt64 = 0
    var _frameID: Mavsdk_Rpc_Mocap_Odometry.MavFrame = .mocapNed
    var _positionBody: Mavsdk_Rpc_Mocap_PositionBody? = nil
    var _q: Mavsdk_Rpc_Mocap_Quaternion? = nil
    var _speedBody: Mavsdk_Rpc_Mocap_SpeedBody? = nil
    var _angularVelocityBody: Mavsdk_Rpc_Mocap_AngularVelocityBody? = nil
    var _poseCovariance: Mavsdk_Rpc_Mocap_Covariance? = nil
    var _velocityCovariance: Mavsdk_Rpc_Mocap_Covariance? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timeUsec = source._timeUsec
      _frameID = source._frameID
      _positionBody = source._positionBody
      _q = source._q
      _speedBody = source._speedBody
      _angularVelocityBody = source._angularVelocityBody
      _poseCovariance = source._poseCovariance
      _velocityCovariance = source._velocityCovariance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._timeUsec)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._frameID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._positionBody)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._q)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._speedBody)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._angularVelocityBody)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._poseCovariance)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._velocityCovariance)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timeUsec != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeUsec, fieldNumber: 1)
      }
      if _storage._frameID != .mocapNed {
        try visitor.visitSingularEnumField(value: _storage._frameID, fieldNumber: 2)
      }
      if let v = _storage._positionBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._q {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._speedBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._angularVelocityBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._poseCovariance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._velocityCovariance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_Odometry, rhs: Mavsdk_Rpc_Mocap_Odometry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeUsec != rhs_storage._timeUsec {return false}
        if _storage._frameID != rhs_storage._frameID {return false}
        if _storage._positionBody != rhs_storage._positionBody {return false}
        if _storage._q != rhs_storage._q {return false}
        if _storage._speedBody != rhs_storage._speedBody {return false}
        if _storage._angularVelocityBody != rhs_storage._angularVelocityBody {return false}
        if _storage._poseCovariance != rhs_storage._poseCovariance {return false}
        if _storage._velocityCovariance != rhs_storage._velocityCovariance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_Odometry.MavFrame: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAV_FRAME_MOCAP_NED"),
    1: .same(proto: "MAV_FRAME_LOCAL_FRD"),
  ]
}

extension Mavsdk_Rpc_Mocap_MocapResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MocapResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.resultStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Mocap_MocapResult, rhs: Mavsdk_Rpc_Mocap_MocapResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Mocap_MocapResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    2: .same(proto: "RESULT_NO_SYSTEM"),
    3: .same(proto: "RESULT_CONNECTION_ERROR"),
    4: .same(proto: "RESULT_INVALID_REQUEST_DATA"),
  ]
}
