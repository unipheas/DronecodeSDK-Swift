//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mission.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceUploadMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_UploadMissionRequest, Mavsdk_Rpc_Mission_UploadMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/UploadMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_CancelMissionUploadRequest, Mavsdk_Rpc_Mission_CancelMissionUploadResponse>, Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/CancelMissionUpload" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_DownloadMissionRequest, Mavsdk_Rpc_Mission_DownloadMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/DownloadMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, Mavsdk_Rpc_Mission_CancelMissionDownloadResponse>, Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/CancelMissionDownload" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceStartMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceStartMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_StartMissionRequest, Mavsdk_Rpc_Mission_StartMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceStartMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/StartMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServicePauseMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServicePauseMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_PauseMissionRequest, Mavsdk_Rpc_Mission_PauseMissionResponse>, Mavsdk_Rpc_Mission_MissionServicePauseMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/PauseMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceClearMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceClearMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_ClearMissionRequest, Mavsdk_Rpc_Mission_ClearMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceClearMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/ClearMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse>, Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SetCurrentMissionItem" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_IsMissionFinishedRequest, Mavsdk_Rpc_Mission_IsMissionFinishedResponse>, Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/IsMissionFinished" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Mission_MissionProgressResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Mission_MissionProgressResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Mission_MissionProgressResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, Mavsdk_Rpc_Mission_MissionProgressResponse>, Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SubscribeMissionProgress" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/GetReturnToLaunchAfterMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SetReturnToLaunchAfterMission" }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall: ClientCallUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCallBase: ClientCallUnaryBase<Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/ImportQgroundcontrolMission" }
}


/// Instantiate Mavsdk_Rpc_Mission_MissionServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Mission_MissionServiceService: ServiceClient {
  /// Synchronous. Unary.
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_UploadMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall

  /// Synchronous. Unary.
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionUploadResponse
  /// Asynchronous. Unary.
  @discardableResult
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionUploadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall

  /// Synchronous. Unary.
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_DownloadMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall

  /// Synchronous. Unary.
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionDownloadResponse
  /// Asynchronous. Unary.
  @discardableResult
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionDownloadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall

  /// Synchronous. Unary.
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_StartMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceStartMissionCall

  /// Synchronous. Unary.
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_PauseMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServicePauseMissionCall

  /// Synchronous. Unary.
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ClearMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ClearMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceClearMissionCall

  /// Synchronous. Unary.
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall

  /// Synchronous. Unary.
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_IsMissionFinishedResponse
  /// Asynchronous. Unary.
  @discardableResult
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeMissionProgress(_ request: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall

  /// Synchronous. Unary.
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall

  /// Synchronous. Unary.
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall

  /// Synchronous. Unary.
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall

}

internal extension Mavsdk_Rpc_Mission_MissionServiceService {
  /// Synchronous. Unary.
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest) throws -> Mavsdk_Rpc_Mission_UploadMissionResponse {
    return try self.uploadMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall {
    return try self.uploadMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest) throws -> Mavsdk_Rpc_Mission_CancelMissionUploadResponse {
    return try self.cancelMissionUpload(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionUploadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall {
    return try self.cancelMissionUpload(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest) throws -> Mavsdk_Rpc_Mission_DownloadMissionResponse {
    return try self.downloadMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall {
    return try self.downloadMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest) throws -> Mavsdk_Rpc_Mission_CancelMissionDownloadResponse {
    return try self.cancelMissionDownload(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionDownloadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall {
    return try self.cancelMissionDownload(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest) throws -> Mavsdk_Rpc_Mission_StartMissionResponse {
    return try self.startMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceStartMissionCall {
    return try self.startMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest) throws -> Mavsdk_Rpc_Mission_PauseMissionResponse {
    return try self.pauseMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServicePauseMissionCall {
    return try self.pauseMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest) throws -> Mavsdk_Rpc_Mission_ClearMissionResponse {
    return try self.clearMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_ClearMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceClearMissionCall {
    return try self.clearMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest) throws -> Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse {
    return try self.setCurrentMissionItem(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, completion: @escaping (Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall {
    return try self.setCurrentMissionItem(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest) throws -> Mavsdk_Rpc_Mission_IsMissionFinishedResponse {
    return try self.isMissionFinished(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (Mavsdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    return try self.isMissionFinished(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeMissionProgress(_ request: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    return try self.subscribeMissionProgress(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest) throws -> Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse {
    return try self.getReturnToLaunchAfterMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall {
    return try self.getReturnToLaunchAfterMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest) throws -> Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse {
    return try self.setReturnToLaunchAfterMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall {
    return try self.setReturnToLaunchAfterMission(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest) throws -> Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse {
    return try self.importQgroundcontrolMission(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, completion: @escaping (Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall {
    return try self.importQgroundcontrolMission(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Mavsdk_Rpc_Mission_MissionServiceServiceClient: ServiceClientBase, Mavsdk_Rpc_Mission_MissionServiceService {
  /// Synchronous. Unary.
  internal func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_UploadMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionUploadResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionUploadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall {
    return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_DownloadMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionDownloadResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionDownloadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall {
    return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_StartMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceStartMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_PauseMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServicePauseMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ClearMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceClearMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ClearMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceClearMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceClearMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall {
    return try Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_IsMissionFinishedResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    return try Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeMissionProgress(_ request: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    return try Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse {
    return try Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall {
    return try Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

class Mavsdk_Rpc_Mission_MissionServiceUploadMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/UploadMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/CancelMissionUpload" }
}

class Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/DownloadMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/CancelMissionDownload" }
}

class Mavsdk_Rpc_Mission_MissionServiceStartMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceStartMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/StartMission" }
}

class Mavsdk_Rpc_Mission_MissionServicePauseMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServicePauseMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/PauseMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceClearMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceClearMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/ClearMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SetCurrentMissionItem" }
}

class Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/IsMissionFinished" }
}

class Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Mission_MissionProgressResponse>, Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SubscribeMissionProgress" }
}

class Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/GetReturnToLaunchAfterMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/SetReturnToLaunchAfterMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCallTestStub: ClientCallUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall {
  override class var method: String { return "/mavsdk.rpc.mission.MissionService/ImportQgroundcontrolMission" }
}

class Mavsdk_Rpc_Mission_MissionServiceServiceTestStub: ServiceClientTestStubBase, Mavsdk_Rpc_Mission_MissionServiceService {
  var uploadMissionRequests: [Mavsdk_Rpc_Mission_UploadMissionRequest] = []
  var uploadMissionResponses: [Mavsdk_Rpc_Mission_UploadMissionResponse] = []
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_UploadMissionResponse {
    uploadMissionRequests.append(request)
    defer { uploadMissionResponses.removeFirst() }
    return uploadMissionResponses.first!
  }
  @discardableResult
  func uploadMission(_ request: Mavsdk_Rpc_Mission_UploadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceUploadMissionCall {
    let response = try self.uploadMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceUploadMissionCallTestStub()
  }

  var cancelMissionUploadRequests: [Mavsdk_Rpc_Mission_CancelMissionUploadRequest] = []
  var cancelMissionUploadResponses: [Mavsdk_Rpc_Mission_CancelMissionUploadResponse] = []
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionUploadResponse {
    cancelMissionUploadRequests.append(request)
    defer { cancelMissionUploadResponses.removeFirst() }
    return cancelMissionUploadResponses.first!
  }
  @discardableResult
  func cancelMissionUpload(_ request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionUploadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCall {
    let response = try self.cancelMissionUpload(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadCallTestStub()
  }

  var downloadMissionRequests: [Mavsdk_Rpc_Mission_DownloadMissionRequest] = []
  var downloadMissionResponses: [Mavsdk_Rpc_Mission_DownloadMissionResponse] = []
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_DownloadMissionResponse {
    downloadMissionRequests.append(request)
    defer { downloadMissionResponses.removeFirst() }
    return downloadMissionResponses.first!
  }
  @discardableResult
  func downloadMission(_ request: Mavsdk_Rpc_Mission_DownloadMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCall {
    let response = try self.downloadMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceDownloadMissionCallTestStub()
  }

  var cancelMissionDownloadRequests: [Mavsdk_Rpc_Mission_CancelMissionDownloadRequest] = []
  var cancelMissionDownloadResponses: [Mavsdk_Rpc_Mission_CancelMissionDownloadResponse] = []
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_CancelMissionDownloadResponse {
    cancelMissionDownloadRequests.append(request)
    defer { cancelMissionDownloadResponses.removeFirst() }
    return cancelMissionDownloadResponses.first!
  }
  @discardableResult
  func cancelMissionDownload(_ request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_CancelMissionDownloadResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCall {
    let response = try self.cancelMissionDownload(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadCallTestStub()
  }

  var startMissionRequests: [Mavsdk_Rpc_Mission_StartMissionRequest] = []
  var startMissionResponses: [Mavsdk_Rpc_Mission_StartMissionResponse] = []
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_StartMissionResponse {
    startMissionRequests.append(request)
    defer { startMissionResponses.removeFirst() }
    return startMissionResponses.first!
  }
  @discardableResult
  func startMission(_ request: Mavsdk_Rpc_Mission_StartMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceStartMissionCall {
    let response = try self.startMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceStartMissionCallTestStub()
  }

  var pauseMissionRequests: [Mavsdk_Rpc_Mission_PauseMissionRequest] = []
  var pauseMissionResponses: [Mavsdk_Rpc_Mission_PauseMissionResponse] = []
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_PauseMissionResponse {
    pauseMissionRequests.append(request)
    defer { pauseMissionResponses.removeFirst() }
    return pauseMissionResponses.first!
  }
  @discardableResult
  func pauseMission(_ request: Mavsdk_Rpc_Mission_PauseMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServicePauseMissionCall {
    let response = try self.pauseMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServicePauseMissionCallTestStub()
  }

  var clearMissionRequests: [Mavsdk_Rpc_Mission_ClearMissionRequest] = []
  var clearMissionResponses: [Mavsdk_Rpc_Mission_ClearMissionResponse] = []
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ClearMissionResponse {
    clearMissionRequests.append(request)
    defer { clearMissionResponses.removeFirst() }
    return clearMissionResponses.first!
  }
  @discardableResult
  func clearMission(_ request: Mavsdk_Rpc_Mission_ClearMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ClearMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceClearMissionCall {
    let response = try self.clearMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceClearMissionCallTestStub()
  }

  var setCurrentMissionItemRequests: [Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest] = []
  var setCurrentMissionItemResponses: [Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse] = []
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse {
    setCurrentMissionItemRequests.append(request)
    defer { setCurrentMissionItemResponses.removeFirst() }
    return setCurrentMissionItemResponses.first!
  }
  @discardableResult
  func setCurrentMissionItem(_ request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCall {
    let response = try self.setCurrentMissionItem(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemCallTestStub()
  }

  var isMissionFinishedRequests: [Mavsdk_Rpc_Mission_IsMissionFinishedRequest] = []
  var isMissionFinishedResponses: [Mavsdk_Rpc_Mission_IsMissionFinishedResponse] = []
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_IsMissionFinishedResponse {
    isMissionFinishedRequests.append(request)
    defer { isMissionFinishedResponses.removeFirst() }
    return isMissionFinishedResponses.first!
  }
  @discardableResult
  func isMissionFinished(_ request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    let response = try self.isMissionFinished(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedCallTestStub()
  }

  var subscribeMissionProgressRequests: [Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest] = []
  var subscribeMissionProgressCalls: [Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall] = []
  func subscribeMissionProgress(_ request: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    subscribeMissionProgressRequests.append(request)
    defer { subscribeMissionProgressCalls.removeFirst() }
    return subscribeMissionProgressCalls.first!
  }

  var getReturnToLaunchAfterMissionRequests: [Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest] = []
  var getReturnToLaunchAfterMissionResponses: [Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse] = []
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse {
    getReturnToLaunchAfterMissionRequests.append(request)
    defer { getReturnToLaunchAfterMissionResponses.removeFirst() }
    return getReturnToLaunchAfterMissionResponses.first!
  }
  @discardableResult
  func getReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCall {
    let response = try self.getReturnToLaunchAfterMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionCallTestStub()
  }

  var setReturnToLaunchAfterMissionRequests: [Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest] = []
  var setReturnToLaunchAfterMissionResponses: [Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse] = []
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse {
    setReturnToLaunchAfterMissionRequests.append(request)
    defer { setReturnToLaunchAfterMissionResponses.removeFirst() }
    return setReturnToLaunchAfterMissionResponses.first!
  }
  @discardableResult
  func setReturnToLaunchAfterMission(_ request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCall {
    let response = try self.setReturnToLaunchAfterMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionCallTestStub()
  }

  var importQgroundcontrolMissionRequests: [Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest] = []
  var importQgroundcontrolMissionResponses: [Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse] = []
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata) throws -> Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse {
    importQgroundcontrolMissionRequests.append(request)
    defer { importQgroundcontrolMissionResponses.removeFirst() }
    return importQgroundcontrolMissionResponses.first!
  }
  @discardableResult
  func importQgroundcontrolMission(_ request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, metadata customMetadata: Metadata, completion: @escaping (Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse?, CallResult) -> Void) throws -> Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCall {
    let response = try self.importQgroundcontrolMission(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionCallTestStub()
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Mavsdk_Rpc_Mission_MissionServiceProvider: ServiceProvider {
  func uploadMission(request: Mavsdk_Rpc_Mission_UploadMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceUploadMissionSession) throws -> Mavsdk_Rpc_Mission_UploadMissionResponse
  func cancelMissionUpload(request: Mavsdk_Rpc_Mission_CancelMissionUploadRequest, session: Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSession) throws -> Mavsdk_Rpc_Mission_CancelMissionUploadResponse
  func downloadMission(request: Mavsdk_Rpc_Mission_DownloadMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSession) throws -> Mavsdk_Rpc_Mission_DownloadMissionResponse
  func cancelMissionDownload(request: Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, session: Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSession) throws -> Mavsdk_Rpc_Mission_CancelMissionDownloadResponse
  func startMission(request: Mavsdk_Rpc_Mission_StartMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceStartMissionSession) throws -> Mavsdk_Rpc_Mission_StartMissionResponse
  func pauseMission(request: Mavsdk_Rpc_Mission_PauseMissionRequest, session: Mavsdk_Rpc_Mission_MissionServicePauseMissionSession) throws -> Mavsdk_Rpc_Mission_PauseMissionResponse
  func clearMission(request: Mavsdk_Rpc_Mission_ClearMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceClearMissionSession) throws -> Mavsdk_Rpc_Mission_ClearMissionResponse
  func setCurrentMissionItem(request: Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, session: Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSession) throws -> Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse
  func isMissionFinished(request: Mavsdk_Rpc_Mission_IsMissionFinishedRequest, session: Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSession) throws -> Mavsdk_Rpc_Mission_IsMissionFinishedResponse
  func subscribeMissionProgress(request: Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, session: Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession) throws -> ServerStatus?
  func getReturnToLaunchAfterMission(request: Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSession) throws -> Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse
  func setReturnToLaunchAfterMission(request: Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSession) throws -> Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse
  func importQgroundcontrolMission(request: Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, session: Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSession) throws -> Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse
}

extension Mavsdk_Rpc_Mission_MissionServiceProvider {
  internal var serviceName: String { return "mavsdk.rpc.mission.MissionService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/mavsdk.rpc.mission.MissionService/UploadMission":
      return try Mavsdk_Rpc_Mission_MissionServiceUploadMissionSessionBase(
        handler: handler,
        providerBlock: { try self.uploadMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceUploadMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/CancelMissionUpload":
      return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSessionBase(
        handler: handler,
        providerBlock: { try self.cancelMissionUpload(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/DownloadMission":
      return try Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase(
        handler: handler,
        providerBlock: { try self.downloadMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/CancelMissionDownload":
      return try Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSessionBase(
        handler: handler,
        providerBlock: { try self.cancelMissionDownload(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/StartMission":
      return try Mavsdk_Rpc_Mission_MissionServiceStartMissionSessionBase(
        handler: handler,
        providerBlock: { try self.startMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceStartMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/PauseMission":
      return try Mavsdk_Rpc_Mission_MissionServicePauseMissionSessionBase(
        handler: handler,
        providerBlock: { try self.pauseMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServicePauseMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/ClearMission":
      return try Mavsdk_Rpc_Mission_MissionServiceClearMissionSessionBase(
        handler: handler,
        providerBlock: { try self.clearMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceClearMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/SetCurrentMissionItem":
      return try Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSessionBase(
        handler: handler,
        providerBlock: { try self.setCurrentMissionItem(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/IsMissionFinished":
      return try Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase(
        handler: handler,
        providerBlock: { try self.isMissionFinished(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/SubscribeMissionProgress":
      return try Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeMissionProgress(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/GetReturnToLaunchAfterMission":
      return try Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSessionBase(
        handler: handler,
        providerBlock: { try self.getReturnToLaunchAfterMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/SetReturnToLaunchAfterMission":
      return try Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSessionBase(
        handler: handler,
        providerBlock: { try self.setReturnToLaunchAfterMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSessionBase) })
          .run()
    case "/mavsdk.rpc.mission.MissionService/ImportQgroundcontrolMission":
      return try Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSessionBase(
        handler: handler,
        providerBlock: { try self.importQgroundcontrolMission(request: $0, session: $1 as! Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Mavsdk_Rpc_Mission_MissionServiceUploadMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceUploadMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_UploadMissionRequest, Mavsdk_Rpc_Mission_UploadMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceUploadMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceUploadMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceUploadMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_CancelMissionUploadRequest, Mavsdk_Rpc_Mission_CancelMissionUploadResponse>, Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSession {}

class Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceCancelMissionUploadSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_DownloadMissionRequest, Mavsdk_Rpc_Mission_DownloadMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceDownloadMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_CancelMissionDownloadRequest, Mavsdk_Rpc_Mission_CancelMissionDownloadResponse>, Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSession {}

class Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceCancelMissionDownloadSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceStartMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceStartMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_StartMissionRequest, Mavsdk_Rpc_Mission_StartMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceStartMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceStartMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceStartMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServicePauseMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServicePauseMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_PauseMissionRequest, Mavsdk_Rpc_Mission_PauseMissionResponse>, Mavsdk_Rpc_Mission_MissionServicePauseMissionSession {}

class Mavsdk_Rpc_Mission_MissionServicePauseMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServicePauseMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceClearMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceClearMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_ClearMissionRequest, Mavsdk_Rpc_Mission_ClearMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceClearMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceClearMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceClearMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_SetCurrentMissionItemRequest, Mavsdk_Rpc_Mission_SetCurrentMissionItemResponse>, Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSession {}

class Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceSetCurrentMissionItemSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_IsMissionFinishedRequest, Mavsdk_Rpc_Mission_IsMissionFinishedResponse>, Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

class Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Mission_MissionProgressResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Mission_MissionProgressResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Mission_MissionProgressResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Mission_SubscribeMissionProgressRequest, Mavsdk_Rpc_Mission_MissionProgressResponse>, Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}

class Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Mission_MissionProgressResponse>, Mavsdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionRequest, Mavsdk_Rpc_Mission_GetReturnToLaunchAfterMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceGetReturnToLaunchAfterMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionRequest, Mavsdk_Rpc_Mission_SetReturnToLaunchAfterMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceSetReturnToLaunchAfterMissionSession {}

internal protocol Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSession: ServerSessionUnary {}

fileprivate final class Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSessionBase: ServerSessionUnaryBase<Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionRequest, Mavsdk_Rpc_Mission_ImportQgroundcontrolMissionResponse>, Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSession {}

class Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSessionTestStub: ServerSessionUnaryTestStub, Mavsdk_Rpc_Mission_MissionServiceImportQgroundcontrolMissionSession {}

