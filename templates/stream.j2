
{% if not is_finite %}
public lazy var {{ name.lower_camel_case }}: Observable<{% if return_type %}{{ return_type.name }}{% else %}Void{% endif %}> = create{{ name.upper_camel_case }}Observable({% for param in params %}{{ param.name.lower_camel_case }}: {{ param.type_info.name }}{{ ", " if not loop.last }}{% endfor %})
{% endif %}

{% if is_finite %}public func {{ name.lower_camel_case }}{% else %}private func create{{ name.upper_camel_case }}Observable{% endif %}({% for param in params %}{{ param.name.lower_camel_case }}: {{ param.type_info.name }}{{ ", " if not loop.last }}{% endfor %}) -> Observable<{% if return_type %}{{ return_type.name }}{% else %}Void{% endif %}> {
    return Observable.create { observer in
        {% if params|length > 0 %}var{% else %}let{% endif %} request = {{ package.upper_camel_case.replace('_', '').replace('.', '_') }}_Subscribe{{ name.upper_camel_case }}Request()

        {% for param in params %}
            {% if param.type_info.is_primitive %}
        request.{{ param.name.lower_camel_case }} = {{ param.name.lower_camel_case }}
            {% else %}
        request.{{ param.name.lower_camel_case }} = {{ param.name.lower_camel_case }}.rpc{{ param.name.upper_camel_case }}
            {% endif %}
        {% endfor %}

        do {
            let call = try self.service.subscribe{{ name.upper_camel_case }}(request, completion: { (callResult) in
                if callResult.statusCode == .ok || callResult.statusCode == .cancelled {
                    observer.onCompleted()
                } else {
                    observer.onError(Runtime{{ plugin_name.upper_camel_case }}Error(callResult.statusMessage!))
                }
            })

            let disposable = self.scheduler.schedule(0, action: { _ in
                {% if not return_name %}
	        while let response = try? call.receive() {
	            observer.onNext(())
	        }
                {% else %}
                while let response = try? call.receive() {
                    {% if return_type.is_repeated %}
		    let {{ name.lower_camel_case }} = response.{{ return_name.lower_camel_case }}.map{ {{ return_type.inner_name }}.translateFromRpc($0) }
                    {% else %}
                        {% if return_type.is_primitive %}
                    let {{ name.lower_camel_case }} = response.{{ return_name.lower_camel_case }}
                        {% else %}
                    let {{ name.lower_camel_case }} = {{ return_type.name }}.translateFromRpc(response.{{ return_name.lower_camel_case }})
                        {%- endif %}
                    {% endif %}

                    {% if has_result %}
                    let result = {{ plugin_name.upper_camel_case }}Result.translateFromRpc(response.{{ plugin_name.lower_camel_case }}Result)

                    switch (result.result) {
                    case .success:
                        observer.onCompleted()
                    case .next:
                        observer.onNext({{ name.lower_camel_case }})
                    default:
                        observer.onError({{ plugin_name.upper_camel_case }}Error(code: result.result, description: result.resultStr))
                    }
                    {% else %}
                    observer.onNext({{ name.lower_camel_case }})
                    {% endif %}
                }
                {% endif %}

                return Disposables.create()
            })

            return Disposables.create {
                call.cancel()
                disposable.dispose()
            }
        } catch {
            observer.onError(error)
            return Disposables.create()
        }
    }
    .retryWhen { error in
        error.map {
            guard $0 is Runtime{{ plugin_name.upper_camel_case }}Error else { throw $0 }
        }
    }
    .share(replay: 1)
}
